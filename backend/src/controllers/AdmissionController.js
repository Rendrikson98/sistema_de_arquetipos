const connection = require('../database/connection');

module.exports = {
    async index(request, response){
        const admission = await connection('admission').select('*');

        return response.json(admission);
    },

    async create(request, response){
        const{
            classificationPatient,
            careUnit,
            allah,
            bedroom,
            bed,
            placeId,
            universalId,
            universalIdType,
            building,
            floor,
            locationDescription,
            publicPlace,
            city,
            state,
            country,
            locationType,
            AdmissionType,
            preAdmissionNumber,
            placeIdPatient,
            universalIdPatient,
            universalIdTypePatient,
            publicPlacePatient,
            cityPatient,
            statePatient,
            countryPatient,
            locationTypePatient,
            admissiontypePatient,
            preAdmissionNumberPatient,
            idDoctor,
            nameDoctor,
            surnameDoctor,
            idRequestingDoctor,
            nameRequestingDoctor,
            surnameRequestingDoctor,
            idDoctorEspecialist,
            nameDoctorEspecialist,
            surnameDoctorEspecialist,
            hospitalUnitDoctorEspecialist,
            admissionsourceDoctorEspecialist,
            idDoctorAdmission,
            nameDoctorAdmission,
            surnameDoctorAdmission,
            financingtypeDoctorAdmission,
            admissionDateTimedoctorAdmission
        } = request.body;

        const [id] = await connection('admission').insert({
            classificationPatient,
            careUnit,
            allah,
            bedroom,
            bed,
            placeId,
            universalId,
            universalIdType,
            building,
            floor,
            locationDescription,
            publicPlace,
            city,
            state,
            country,
            locationType,
            AdmissionType,
            preAdmissionNumber,
            placeIdPatient,
            universalIdPatient,
            universalIdTypePatient,
            publicPlacePatient,
            cityPatient,
            statePatient,
            countryPatient,
            locationTypePatient,
            admissiontypePatient,
            preAdmissionNumberPatient,
            idDoctor,
            nameDoctor,
            surnameDoctor,
            idRequestingDoctor,
            nameRequestingDoctor,
            surnameRequestingDoctor,
            idDoctorEspecialist,
            nameDoctorEspecialist,
            surnameDoctorEspecialist,
            hospitalUnitDoctorEspecialist,
            admissionsourceDoctorEspecialist,
            idDoctorAdmission,
            nameDoctorAdmission,
            surnameDoctorAdmission,
            financingtypeDoctorAdmission,
            admissionDateTimedoctorAdmission
        });

        return response.json({
            id,
            classificationPatient,
            careUnit,
            allah,
            bedroom,
            bed,
            placeId,
            universalId,
            universalIdType,
            building,
            floor,
            locationDescription,
            publicPlace,
            city,
            state,
            country,
            locationType,
            AdmissionType,
            preAdmissionNumber,
            placeIdPatient,
            universalIdPatient,
            universalIdTypePatient,
            publicPlacePatient,
            cityPatient,
            statePatient,
            countryPatient,
            locationTypePatient,
            admissiontypePatient,
            preAdmissionNumberPatient,
            idDoctor,
            nameDoctor,
            surnameDoctor,
            idRequestingDoctor,
            nameRequestingDoctor,
            surnameRequestingDoctor,
            idDoctorEspecialist,
            nameDoctorEspecialist,
            surnameDoctorEspecialist,
            hospitalUnitDoctorEspecialist,
            admissionsourceDoctorEspecialist,
            idDoctorAdmission,
            nameDoctorAdmission,
            surnameDoctorAdmission,
            financingtypeDoctorAdmission,
            admissionDateTimedoctorAdmission
        });
    } 
}